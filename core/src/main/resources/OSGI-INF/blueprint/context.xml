<!--
  ~ Copyright (c) 2012 S.C. Axemblr Software Solutions S.R.L
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"
           xmlns:cfg="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0">

    <ext:property-placeholder/>

    <cfg:property-placeholder persistent-id="com.axemblr.provisionr"
                              placeholder-prefix="$(" placeholder-suffix=")" update-strategy="reload">
        <cfg:default-properties>
            <cfg:property name="activiti.db.url" value="jdbc:h2:mem:axemblr;DB_CLOSE_DELAY=-1"/>
            <cfg:property name="activiti.db.user" value="sa"/>
            <cfg:property name="activiti.db.password" value=""/>
            <cfg:property name="activiti.db.schemaUpdate" value="true"/>
        </cfg:default-properties>
    </cfg:property-placeholder>

    <bean id="dataSource" class="org.h2.jdbcx.JdbcDataSource" scope="singleton">
        <property name="URL" value="$(activiti.db.url)"/>
        <property name="user" value="$(activiti.db.user)"/>
        <property name="password" value="$(activiti.db.password)"/>
    </bean>

    <bean id="configurationFactory" class="org.activiti.osgi.blueprint.ConfigurationFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="databaseSchemaUpdate" value="$(activiti.db.schemaUpdate)"/>
        <property name="jobExecutorActivate" value="true"/>
    </bean>

    <bean id="configuration" factory-ref="configurationFactory" factory-method="getConfiguration"/>

    <bean id="processEngineFactory"
          class="org.activiti.osgi.blueprint.ProcessEngineFactoryWithELResolver"
          init-method="init"
          destroy-method="destroy">

        <property name="processEngineConfiguration" ref="configuration"/>
        <property name="bundle" ref="blueprintBundle"/>
        <property name="blueprintELResolver" ref="blueprintELResolver"/>
    </bean>

    <bean id="processEngine" factory-ref="processEngineFactory"
          factory-method="getObject"/>

    <bean id="runtimeService" factory-ref="processEngine" factory-method="getRuntimeService"/>
    <bean id="repositoryService" factory-ref="processEngine" factory-method="getRepositoryService"/>

    <reference-list id="activityProviders" availability="optional"
                    interface="org.activiti.engine.delegate.JavaDelegate"
                    activation="eager">
        <reference-listener ref="blueprintELResolver" bind-method="bindService" unbind-method="unbindService"/>
    </reference-list>

    <bean id="blueprintELResolver" class="org.activiti.osgi.blueprint.BlueprintELResolver"/>

    <service ref="processEngine" interface="org.activiti.engine.ProcessEngine"/>
    <service ref="runtimeService" interface="org.activiti.engine.RuntimeService"/>
    <service ref="repositoryService" interface="org.activiti.engine.RepositoryService"/>

    <!-- Reusable Activiti activities -->

    <bean id="checkSshPortIsOpen" class="com.axemblr.provisionr.core.activities.IsMachinePortOpen">
        <argument value="sshPortIsOpen"/>
        <argument value="22"/>
    </bean>
    <service ref="checkSshPortIsOpen" auto-export="interfaces"/>

    <bean id="installPackages" class="com.axemblr.provisionr.core.activities.InstallPackages"/>
    <service ref="installPackages" auto-export="interfaces"/>

    <!-- force registration of Bouncy Castle as JCE provider - needed for jclouds -->
    <bean id="bouncyCastleAsJceProviderRegistration" class="net.schmizz.sshj.common.SecurityUtils"
          factory-method="getSecurityProvider"/>

</blueprint>

